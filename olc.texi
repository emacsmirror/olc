\input texinfo
@documentencoding utf-8
@setfilename olc
@settitle Open Location Code for emacs

@titlepage
@title Open Location Code for emacs
@author David Byers
@end titlepage

@node Top
@unnumbered Introduction

Open Location Code is a way to encode locations in a format that is
easier for people (not computers) to use than latitude and longitude.

For example, the code 9FCQ9HXG+4C refers to the location 58°23'52.1"N
15°34'33.8"E (58.397813, 15.576063).

Codes can be shortened by removing characters from the beginning
andding a reference location: 9HXG+4C with the reference "Linköping"
would refer to the same set of coordinates.

For details about open location code and implementations in other
languages, see https://github.com/google/open-location-code.

@menu
* Data types::  Data types defined by olc.
* Errors::      Errors raised by olc.
* Functions::   Functions defined by olc.
* Index::       Type and function index.
@end menu

@node Data types,Errors,,Top
@unnumbered Data types

olc defines two data types: olc-area and olc-parse. The former
represents the result of decoding a code and the latter is the result
of parsing a code, and is mostly for internal use.

@menu
* olc-area::      The olc-area data type.
* olc-parse::     The olc-parse data type.
@end menu

@node olc-area,olc-parse,,Data types
@unnumberedsec olc-area

An olc-area is the area represented by an open location code. All fields
are read-only once the object has been created.

@defun olc-area-create &key latlo lonlo lathi lonhi
Creates an olc-area with southwest corner (@var{latlo},@var{lonlo}) and
northeast corner (@var{lathi},@var{lonhi}).
@end defun

@defun olc-area-p obj
Return non-@code{nil} if @var{obj} is an olc-area.
@end defun

@defun olc-area-latlo area
Return the southern latitude of @var{area}.
@end defun

@defun olc-area-lonlo area
Return the eastern longitude of @var{area}.
@end defun

@defun olc-area-lathi area
Return the northern latitude of @var{area}.
@end defun

@defun olc-area-lonhi area
Return the western longitude of @var{area}.
@end defun

@defun olc-area-lat area
Return the latitude of the center of @var{area}.
@end defun

@defun olc-area-lon area
Return the longitude of the center of @var{area}.
@end defun


@node olc-parse,,olc-area,Data types
@unnumberedsec olc-parse

The olc-parse is a structure mainly used internally. Unless you call
@code{olc-parse-code} you will probably never see one.

@defun olc-parse-create &key pairs grid short prec code
Create an olc-parse structure. Don't call this: use
@code{olc-parse-code} instead.
@end defun

@defun olc-parse-pairs parse
Returns the list of parsed pairs in @var{parse}. Pairs are first ten
digits of a full code (five pairs). For padded and shortened codes,
the list of pairs could be shorter.
@end defun

@defun olc-parse-grid parse
Returns the list of parsed grid digits in @var{parse}. Grid digits are
all (up to five) the digits that follow the last pair.
@end defun

@defun olc-parse-short parse
Return non-@code{nil} if @var{parse} represents a shortened code.
@end defun

@defun olc-parse-precision parse
Return the precision in digits of the parsed code in @var{parse}. A
full code without padding will have precision 8, 10, or more. Full
codes with padding have precision 6 or lower. Shortened codes should
have at least a precision of 8 since padded codes can't be shortened,
but don't count on this.
@end defun


@node Errors,Functions,Data types,Top
@unnumberedsec Errors

@table @code
@item olc-error
The message is @samp{Open location code error}. This is the parent of
all errors in olc.

@item olc-parse-error
The message is @samp{Error parsing open location code}. This is the
parent of the various parse errors. All parse errors have the same
associated data: (@var{code} @var{pos} @var{data}...), where @var{pos}
is the approximate position of the parse error, @var{code} is the
code being parsed, and @var{data} depends on the error.

@item olc-parse-error-unexpected-end
The message is @samp{Unexpected end parsing open location
code}. Raised when the code is incomplete.

@item olc-parse-error-invalid-character
The message is @samp{Invalid character parsing open location
code}. Raised when an invalid character is encountered. @var{data} is
a string containing the invalid character.

@item olc-parse-error-missing-plus
The message is @samp{Missing plus sign parsing open location
code}. Raised when the plus sign is missing.

@item olc-parse-error-invalid-padding
The message is @samp{Invalid padding parsing open location
code}. Raised when the padding is invalid (e.g. odd in length).

@item olc-parse-error-padded-shortcode
The message is @samp{Padded short code parsing open location
code}. Raised when parsing a code with padding that has been
shortened.

@item olc-parse-error-digit-after-padding
The message is @samp{Unexpected digit after padding parsing open
location code}. Raised when an unexpected digit is encountered
(e.g. after padding).

@item olc-parse-error-empty-code
The message is @samp{Empty code when parsing open location
code}. Raised when the code is empty (i.e. @samp{+}).

@item olc-decode-error
The message is @samp{Error decoding open location code}. The
associated data is a list containing the code being decoded as its
first element. This is the parent of the various decoding errors
raised by @code{olc-decode}.

@item olc-decode-error-shortcode
The message is @samp{Short codes must be recovered before
decoding}. This is raised when an attempt is made to decode a
shortened code.

@item olc-shorten-error
The message is @samp{Error shortening open location code}. The
associated data is a list containing the code being decoded as its
first element. This is the parent of the various shortening errors
raised by @code{olc-shorten} and @code{olc-shorten-compound}.

@item olc-shorten-error-shortcode
The message is @samp{Code is already shortened}. Raised when
attempting to shorten a shortened code.

@item olc-shorten-error-padding
The message is @samp{Unable to shorten padded codes}. Raised when
attempting to shorten a code with padding.

@item olc-recover-error
The message is @samp{Error recovering open location code}. The
associated data depends on the exact code, but is always a list with
the code being recovered as its first element. This is the parent of
the various recovery errors raised by @code{olc-recover} and
@code{olc-recover-compound}.

@item olc-recover-error-geocoding-request
The messags is @samp{Reference location search failed}. Raised when
geographical search fails due to an error at the HTTP layer. The
associated data is (@var{code}, @var{ref}) where @var{ref} is the
reference being searched.

@item olc-recover-error-geocoding-not-found
The messags is @samp{Reference location not found}. Raised when
geographical search returns no result. The associated data is
(@var{code}, @var{ref}) where @var{ref} is the reference being
searched.

@item olc-recover-error-geocoding-invalid
The messags is @samp{Invalid reference location}. Raised when
geographical search returns an invalid result. The associated data is
(@var{code}, @var{ref}) where @var{ref} is the reference being
searched.

@end table

@node Functions,Index,Errors,Top
@unnumberedsec Functions

@defun olc-encode lat lon &key length
Encode a latitude @var{lat}, longitude @var{lon}, into an open
location code of length @var{len}. The length is automatically clipped
to between 2 and 15. (@code{olc-encode-error} is raised if the length
is otherwise invalid (i.e. 3, 5, 7, or 9).

@example
@group
(olc-encode 58.397813 15.576063)
@result{} "9FCQ9HXG+4C"
(olc-encode 58.397813 15.576063 :len 11)
@result{} "9FCQ9HXG+4CG"
(olc-encode 58.397813 15.576063 :len 8)
@result{} "9FCQ9HXG+"
(olc-encode 58.397813 15.576063 :len 4)
@result{} "9FCQ0000+"
@end group
@end example
@end defun

@defun olc-decode code
Decode @var{code} and return an @code{olc-area} representing the
location. Returns an olc-area structure. Raises @code{olc-parse-error}
if the code can't be parsed, and @code{olc-decode-error} if it can't
be decoded (e.g. a padded shortened code, a padded code with grid
coordinates, an empty code, and so forth).

If @var{format} is @samp{area} (the default), the returned value is an
full open location code. If @var{format} is @samp{latlon} it is a list
(@var{latitude} @var{longitude}) representing the center of the
location.

@example
@group
(olc-decode "9FCQ9HXG+4CG")
@result{} #s(olc-area 58.397800000000004 15.5760625 58.397825000000005 15.57609375)
(olc-area-lat (olc-decode "9FCQ9HXG+4CG"))
@result{} 58.3978125
(olc-area-lon (olc-decode "9FCQ9HXG+4CG"))
@result{} 15.576078125
(olc-decode "9FCQ9HXG+4CG" :format 'latlon)
@result{} (58.3978125 15.576078125)
@end group
@end example
@end defun

@defun olc-shorten code lat lon &key limit
Shorten @var{code}, which must be a full open location code, using
latitude @var{lat} and longitude @var{lon} as the reference. If
@var{limit} is specified, then the code will be shortened by at most
that many digits. If the code can't be shortened, the original code is
returned. @code{olc-shorten-error} is raised if @var{code} is a padded
or shortened code, of if @var{limit} is not even.

@example
@group
(olc-shorten "9C3W9QCJ+2VX" 51.3701125 -1.217765625)
@result{} "+2VX"
(olc-shorten "9C3W9QCJ+2VX" 51.3701125 -1.217765625 :limit 4)
@result{} "9QCJ+2VX"
@end group
@end example
@end defun

@defun olc-shorten-compound code &key limit
Shorten @var{code}, which must be a full open location code, finding a
reference near the encoded location. If @var{limit} is non-@code{nil},
then the code will be shortened by at most that many digits. If the
code can't be shortened, the original code is returned.

If @var{zoom} is non-@code{nil}, then limit references to that zoom
level.  The default is 8 and the maximum is 18. Higher zoom levels
yield more precise but longer references. Lower zoom levels yield
simpler references but longer codes. The default seems to usually
produce codes with four characters before the plus sign.

@code{olc-shorten-error} is raised if @var{code} is a padded or
shortened code, of if @var{limit} is not even.

@example
@group
(olc-shorten-compound "5Q6HM24Q+89")
@result{} "M24Q+89 Mutitjulu, Northern Territory, Australia"
(olc-shorten-compound "5Q6HM24Q+89" :limit 2)
@result{} "6HM24Q+89 Northern Territory, Australia"
(olc-shorten-compound "5Q6HM24Q+89" :zoom 14)
@result{} "M24Q+89 Mutitjulu, Northern Territory, Australia"
(olc-shorten-compound "5Q6HM24Q+89" :zoom 1)
"6HM24Q+89 Australia"
@end group
@end example
@end defun

@defun olc-recover code lat lon &key format
Recover the closest point to coordinates @var{lat} and @var{lon} with
a code that can be shortened to @var{code}. If @var{format} is
@code{latlon}, then the center of the recovered area (@var{latitude} .
@var{longitude}) is returned.

If @var{format} is @samp{area} (the default), the returned value is an
full open location code. If @var{format} is @samp{latlon} it is a list
(@var{latitude} @var{longitude}) representing the center of the
location.

@example
@group
(olc-recover "+2VX" 51.3701125 -1.217765625)
@result{} "9C3W9QCJ+2VX"
(olc-recover "+2VX" 51.3701125 -1.217765625 :format 'latlon)
@result{} (51.370112500000005 -1.2177656250000002)
@end group
@end example
@end defun

@defun olc-recover-compound code &key ref format
Recover a shortened code @i{without} the reference latitude and
longitude.

@var{code} is the (shortened) code to decode. @var{ref} is either
@code{nil} or the geographical reference to use instead of latitude
and longitude. If @var{ref} is @code{nil}, then @var{code} must end
with the geographical reference, separated from the code by
whitespace.

If @var{format} is @samp{area} (the default), the returned value is an
full open location code. If @var{format} is @samp{latlon} it is a list
(@var{latitude} @var{longitude}) representing the center of the
location.

@example
@group
(olc-recover-compound "M24Q+89 Mutitjulu")
@result{} "5Q6HM24Q+89"
(olc-recover-compound "M24Q+89" "Mutitjulu")
@result{} "5Q6HM24Q+89"
(olc-recover-compound "M24Q+89" "Mutitjulu" :format 'latlon)
@result{} (-25.344187500000004 131.0384375)
@end group
@end example

This function requires the @code{request} package to be installed, and
uses the OpenStreetMap API to convert the geographical reference to
coordinates. Please make sure you follow the acceptable use policy for
the API (e.g., one request per second, tops, allowed).
@end defun

@defun olc-is-valid code &key compound
Returns non-@code{nil} if @var{code} is a valid open location code. If
@var{compound} is non-@code{nil}, then check only up to the first
space character so non-@code{nil} is returned for strings that look
like compound codes.
@end defun

@defun olc-is-short code &key compound
Returns non-@code{nil} if @var{code} is a valid short location code.
If @var{compound} is non-@code{nil}, then check only up to the first
space character so non-@code{nil} is returned for strings that look
like compound codes. Returns @code{nil} for valid full and for invalid
codes.
@end defun

@defun olc-is-full code &key compound
Returns non-@code{nil} if @var{code} is a valid full open location
code. If @var{compound} is non-@code{nil}, then check only up to the
first space character so non-@code{nil} is returned for strings that
look like compound codes. Returns @code{nil} for valid short and for
invalid codes.
@end defun


@node Index,,Functions,Top
@unnumbered Index

@printindex tp
@printindex fn

@bye
